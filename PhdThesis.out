\BOOKMARK [-1][]{title.-1}{云计算基础软件架构的研究和实践}{}% 1
\BOOKMARK [0][]{chapter*.1}{摘 要}{title.-1}% 2
\BOOKMARK [0][]{chapter*.2}{ABSTRACT}{title.-1}% 3
\BOOKMARK [0][]{chapter*.3}{目 录}{title.-1}% 4
\BOOKMARK [0][]{chapter*.4}{表 格}{title.-1}% 5
\BOOKMARK [0][]{chapter*.5}{插 图}{title.-1}% 6
\BOOKMARK [0][]{chapter.1}{第一章  绪论}{title.-1}% 7
\BOOKMARK [1][]{section.1.1}{1.1 云计算的基本概念}{chapter.1}% 8
\BOOKMARK [1][]{section.1.2}{1.2 研究背景和意义}{chapter.1}% 9
\BOOKMARK [2][]{subsection.1.2.1}{1.2.1 分布式存储系统的发展和新的需求}{section.1.2}% 10
\BOOKMARK [2][]{subsection.1.2.2}{1.2.2 分布式计算模型的发展和新的需求}{section.1.2}% 11
\BOOKMARK [1][]{section.1.3}{1.3 本文的研究内容}{chapter.1}% 12
\BOOKMARK [1][]{section.1.4}{1.4 论文结构}{chapter.1}% 13
\BOOKMARK [0][]{chapter.2}{第二章  基于模糊逻辑的异构Hadoop集群配置优化}{title.-1}% 14
\BOOKMARK [1][]{section.2.1}{2.1 引言}{chapter.2}% 15
\BOOKMARK [1][]{section.2.2}{2.2 相关背景介绍}{chapter.2}% 16
\BOOKMARK [2][]{subsection.2.2.1}{2.2.1 模糊逻辑}{section.2.2}% 17
\BOOKMARK [2][]{subsection.2.2.2}{2.2.2 Hadoop参数分析}{section.2.2}% 18
\BOOKMARK [2][]{subsection.2.2.3}{2.2.3 Hadoop参数加载流程}{section.2.2}% 19
\BOOKMARK [1][]{section.2.3}{2.3 基于模糊逻辑的配置算法}{chapter.2}% 20
\BOOKMARK [2][]{subsection.2.3.1}{2.3.1 运行时数据搜集}{section.2.3}% 21
\BOOKMARK [2][]{subsection.2.3.2}{2.3.2 模糊控制器的实现}{section.2.3}% 22
\BOOKMARK [1][]{section.2.4}{2.4 实验和分析}{chapter.2}% 23
\BOOKMARK [2][]{subsection.2.4.1}{2.4.1 Matlab仿真}{section.2.4}% 24
\BOOKMARK [2][]{subsection.2.4.2}{2.4.2 Hadoop集群实验}{section.2.4}% 25
\BOOKMARK [1][]{section.2.5}{2.5 小结}{chapter.2}% 26
\BOOKMARK [0][]{chapter.3}{第三章  基于内存的分布式键值存储系统}{title.-1}% 27
\BOOKMARK [1][]{section.3.1}{3.1 引言}{chapter.3}% 28
\BOOKMARK [1][]{section.3.2}{3.2 相关工作简介}{chapter.3}% 29
\BOOKMARK [2][]{subsection.3.2.1}{3.2.1 相关分布式存储系统介绍}{section.3.2}% 30
\BOOKMARK [2][]{subsection.3.2.2}{3.2.2 内存存储的可行性和相关系统介绍}{section.3.2}% 31
\BOOKMARK [2][]{subsection.3.2.3}{3.2.3 前人工作的不足}{section.3.2}% 32
\BOOKMARK [1][]{section.3.3}{3.3 基于内存的分布式键值存储系统}{chapter.3}% 33
\BOOKMARK [2][]{subsection.3.3.1}{3.3.1 Sedna总体架构}{section.3.3}% 34
\BOOKMARK [2][]{subsection.3.3.2}{3.3.2 数据分割}{section.3.3}% 35
\BOOKMARK [2][]{subsection.3.3.3}{3.3.3 数据备份}{section.3.3}% 36
\BOOKMARK [2][]{subsection.3.3.4}{3.3.4 节点管理}{section.3.3}% 37
\BOOKMARK [2][]{subsection.3.3.5}{3.3.5 ZooKeeper子机群}{section.3.3}% 38
\BOOKMARK [2][]{subsection.3.3.6}{3.3.6 基本数据访问API}{section.3.3}% 39
\BOOKMARK [2][]{subsection.3.3.7}{3.3.7 持久化策略}{section.3.3}% 40
\BOOKMARK [2][]{subsection.3.3.8}{3.3.8 Sedna实时数据访问接口}{section.3.3}% 41
\BOOKMARK [1][]{section.3.4}{3.4 实验和性能分析}{chapter.3}% 42
\BOOKMARK [2][]{subsection.3.4.1}{3.4.1 单客户端性能}{section.3.4}% 43
\BOOKMARK [2][]{subsection.3.4.2}{3.4.2 多客户端性能}{section.3.4}% 44
\BOOKMARK [2][]{subsection.3.4.3}{3.4.3 ZooKeeper性能分析}{section.3.4}% 45
\BOOKMARK [1][]{section.3.5}{3.5 小结}{chapter.3}% 46
\BOOKMARK [0][]{chapter.4}{第四章  基于触发器的计算模型}{title.-1}% 47
\BOOKMARK [1][]{section.4.1}{4.1 引言}{chapter.4}% 48
\BOOKMARK [1][]{section.4.2}{4.2 相关工作介绍}{chapter.4}% 49
\BOOKMARK [2][]{subsection.4.2.1}{4.2.1 MapReduce模型及其问题}{section.4.2}% 50
\BOOKMARK [2][]{subsection.4.2.2}{4.2.2 迭代处理模型}{section.4.2}% 51
\BOOKMARK [2][]{subsection.4.2.3}{4.2.3 递增计算模型}{section.4.2}% 52
\BOOKMARK [2][]{subsection.4.2.4}{4.2.4 实时处理模型}{section.4.2}% 53
\BOOKMARK [2][]{subsection.4.2.5}{4.2.5 前人工作的不足及新的方案}{section.4.2}% 54
\BOOKMARK [1][]{section.4.3}{4.3 基于触发器的编程模型}{chapter.4}% 55
\BOOKMARK [2][]{subsection.4.3.1}{4.3.1 触发器模型}{section.4.3}% 56
\BOOKMARK [2][]{subsection.4.3.2}{4.3.2 Domino的编程模型}{section.4.3}% 57
\BOOKMARK [2][]{subsection.4.3.3}{4.3.3 同步模型}{section.4.3}% 58
\BOOKMARK [1][]{section.4.4}{4.4 设计和实现}{chapter.4}% 59
\BOOKMARK [2][]{subsection.4.4.1}{4.4.1 执行流程}{section.4.4}% 60
\BOOKMARK [2][]{subsection.4.4.2}{4.4.2 事件感知组件\(Event Detector\)}{section.4.4}% 61
\BOOKMARK [2][]{subsection.4.4.3}{4.4.3 延迟写组件\(Gathered I/O\)}{section.4.4}% 62
\BOOKMARK [2][]{subsection.4.4.4}{4.4.4 容错和恢复组件}{section.4.4}% 63
\BOOKMARK [2][]{subsection.4.4.5}{4.4.5 优化}{section.4.4}% 64
\BOOKMARK [1][]{section.4.5}{4.5 应用实例}{chapter.4}% 65
\BOOKMARK [2][]{subsection.4.5.1}{4.5.1 PageRank算法}{section.4.5}% 66
\BOOKMARK [2][]{subsection.4.5.2}{4.5.2 协同过滤算法}{section.4.5}% 67
\BOOKMARK [2][]{subsection.4.5.3}{4.5.3 K-means算法}{section.4.5}% 68
\BOOKMARK [1][]{section.4.6}{4.6 实验分析}{chapter.4}% 69
\BOOKMARK [2][]{subsection.4.6.1}{4.6.1 实验环境设置}{section.4.6}% 70
\BOOKMARK [2][]{subsection.4.6.2}{4.6.2 HBase性能比较}{section.4.6}% 71
\BOOKMARK [2][]{subsection.4.6.3}{4.6.3 与MapReduce比较}{section.4.6}% 72
\BOOKMARK [2][]{subsection.4.6.4}{4.6.4 递增计算性能}{section.4.6}% 73
\BOOKMARK [1][]{section.4.7}{4.7 小结}{chapter.4}% 74
\BOOKMARK [0][]{chapter.5}{第五章  结束语}{title.-1}% 75
\BOOKMARK [1][]{section.5.1}{5.1 研究工作总结}{chapter.5}% 76
\BOOKMARK [1][]{section.5.2}{5.2 对未来工作的展望}{chapter.5}% 77
\BOOKMARK [0][]{chapter*.66}{参考文献}{title.-1}% 78
\BOOKMARK [1][]{section.Alph0.1}{.1 代码节选}{chapter*.66}% 79
\BOOKMARK [2][]{subsection.Alph0.1.1}{.1.1 [分布式爬虫实例]}{section.Alph0.1}% 80
\BOOKMARK [2][]{subsection.Alph0.1.2}{.1.2 [PageRank实现实例]}{section.Alph0.1}% 81
\BOOKMARK [0][]{appendix*.67}{致 谢}{title.-1}% 82
\BOOKMARK [0][]{appendix*.68}{在读期间发表的学术论文与取得的研究成果}{title.-1}% 83
